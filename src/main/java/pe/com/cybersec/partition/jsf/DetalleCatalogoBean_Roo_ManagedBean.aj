// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pe.com.cybersec.partition.jsf;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;
import javax.faces.validator.LengthValidator;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.inputtextarea.InputTextarea;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;
import org.springframework.beans.factory.annotation.Autowired;
import pe.com.cybersec.partition.domain.Catalogo;
import pe.com.cybersec.partition.domain.DetalleCatalogo;
import pe.com.cybersec.partition.jsf.DetalleCatalogoBean;
import pe.com.cybersec.partition.jsf.converter.CatalogoConverter;
import pe.com.cybersec.partition.jsf.util.MessageFactory;
import pe.com.cybersec.partition.service.CatalogoService;
import pe.com.cybersec.partition.service.DetalleCatalogoService;

privileged aspect DetalleCatalogoBean_Roo_ManagedBean {
    
    declare @type: DetalleCatalogoBean: @ManagedBean(name = "detalleCatalogoBean");
    
    declare @type: DetalleCatalogoBean: @SessionScoped;
    
    @Autowired
    DetalleCatalogoService DetalleCatalogoBean.detalleCatalogoService;
    
    @Autowired
    CatalogoService DetalleCatalogoBean.catalogoService;
    
    private String DetalleCatalogoBean.name = "DetalleCatalogoes";
    
    private DetalleCatalogo DetalleCatalogoBean.detalleCatalogo;
    
    private List<DetalleCatalogo> DetalleCatalogoBean.allDetalleCatalogoes;
    
    private boolean DetalleCatalogoBean.dataVisible = false;
    
    private List<String> DetalleCatalogoBean.columns;
    
    private HtmlPanelGrid DetalleCatalogoBean.createPanelGrid;
    
    private HtmlPanelGrid DetalleCatalogoBean.editPanelGrid;
    
    private HtmlPanelGrid DetalleCatalogoBean.viewPanelGrid;
    
    private boolean DetalleCatalogoBean.createDialogVisible = false;
    
    @PostConstruct
    public void DetalleCatalogoBean.init() {
        columns = new ArrayList<String>();
        columns.add("codigo");
        columns.add("descripcion");
        columns.add("valorAuxiliar");
        columns.add("idEstado");
        columns.add("fechaCreacion");
    }
    
    public String DetalleCatalogoBean.getName() {
        return name;
    }
    
    public List<String> DetalleCatalogoBean.getColumns() {
        return columns;
    }
    
    public List<DetalleCatalogo> DetalleCatalogoBean.getAllDetalleCatalogoes() {
        return allDetalleCatalogoes;
    }
    
    public void DetalleCatalogoBean.setAllDetalleCatalogoes(List<DetalleCatalogo> allDetalleCatalogoes) {
        this.allDetalleCatalogoes = allDetalleCatalogoes;
    }
    
    public String DetalleCatalogoBean.findAllDetalleCatalogoes() {
        allDetalleCatalogoes = detalleCatalogoService.findAllDetalleCatalogoes();
        dataVisible = !allDetalleCatalogoes.isEmpty();
        return null;
    }
    
    public boolean DetalleCatalogoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void DetalleCatalogoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid DetalleCatalogoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void DetalleCatalogoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCatalogoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void DetalleCatalogoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCatalogoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void DetalleCatalogoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCatalogoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel idCatalogoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idCatalogoCreateOutput.setFor("idCatalogoCreateInput");
        idCatalogoCreateOutput.setId("idCatalogoCreateOutput");
        idCatalogoCreateOutput.setValue("Id Catalogo:");
        htmlPanelGrid.getChildren().add(idCatalogoCreateOutput);
        
        AutoComplete idCatalogoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idCatalogoCreateInput.setId("idCatalogoCreateInput");
        idCatalogoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idCatalogo}", Catalogo.class));
        idCatalogoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{detalleCatalogoBean.completeIdCatalogo}", List.class, new Class[] { String.class }));
        idCatalogoCreateInput.setDropdown(true);
        idCatalogoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idCatalogo", String.class));
        idCatalogoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idCatalogo.codigo} #{idCatalogo.descripcion} #{idCatalogo.idEstado} #{idCatalogo.fechaCreacion}", String.class));
        idCatalogoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idCatalogo}", Catalogo.class));
        idCatalogoCreateInput.setConverter(new CatalogoConverter());
        idCatalogoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idCatalogoCreateInput);
        
        Message idCatalogoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idCatalogoCreateInputMessage.setId("idCatalogoCreateInputMessage");
        idCatalogoCreateInputMessage.setFor("idCatalogoCreateInput");
        idCatalogoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idCatalogoCreateInputMessage);
        
        OutputLabel codigoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codigoCreateOutput.setFor("codigoCreateInput");
        codigoCreateOutput.setId("codigoCreateOutput");
        codigoCreateOutput.setValue("Codigo:");
        htmlPanelGrid.getChildren().add(codigoCreateOutput);
        
        InputText codigoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codigoCreateInput.setId("codigoCreateInput");
        codigoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.codigo}", String.class));
        LengthValidator codigoCreateInputValidator = new LengthValidator();
        codigoCreateInputValidator.setMaximum(2);
        codigoCreateInput.addValidator(codigoCreateInputValidator);
        codigoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codigoCreateInput);
        
        Message codigoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codigoCreateInputMessage.setId("codigoCreateInputMessage");
        codigoCreateInputMessage.setFor("codigoCreateInput");
        codigoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codigoCreateInputMessage);
        
        OutputLabel descripcionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionCreateOutput.setFor("descripcionCreateInput");
        descripcionCreateOutput.setId("descripcionCreateOutput");
        descripcionCreateOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionCreateOutput);
        
        InputTextarea descripcionCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionCreateInput.setId("descripcionCreateInput");
        descripcionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.descripcion}", String.class));
        LengthValidator descripcionCreateInputValidator = new LengthValidator();
        descripcionCreateInputValidator.setMaximum(150);
        descripcionCreateInput.addValidator(descripcionCreateInputValidator);
        descripcionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionCreateInput);
        
        Message descripcionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionCreateInputMessage.setId("descripcionCreateInputMessage");
        descripcionCreateInputMessage.setFor("descripcionCreateInput");
        descripcionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionCreateInputMessage);
        
        OutputLabel valorAuxiliarCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        valorAuxiliarCreateOutput.setFor("valorAuxiliarCreateInput");
        valorAuxiliarCreateOutput.setId("valorAuxiliarCreateOutput");
        valorAuxiliarCreateOutput.setValue("Valor Auxiliar:");
        htmlPanelGrid.getChildren().add(valorAuxiliarCreateOutput);
        
        InputTextarea valorAuxiliarCreateInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        valorAuxiliarCreateInput.setId("valorAuxiliarCreateInput");
        valorAuxiliarCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.valorAuxiliar}", String.class));
        LengthValidator valorAuxiliarCreateInputValidator = new LengthValidator();
        valorAuxiliarCreateInputValidator.setMaximum(50);
        valorAuxiliarCreateInput.addValidator(valorAuxiliarCreateInputValidator);
        valorAuxiliarCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(valorAuxiliarCreateInput);
        
        Message valorAuxiliarCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        valorAuxiliarCreateInputMessage.setId("valorAuxiliarCreateInputMessage");
        valorAuxiliarCreateInputMessage.setFor("valorAuxiliarCreateInput");
        valorAuxiliarCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(valorAuxiliarCreateInputMessage);
        
        OutputLabel idEstadoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idEstadoCreateOutput.setFor("idEstadoCreateInput");
        idEstadoCreateOutput.setId("idEstadoCreateOutput");
        idEstadoCreateOutput.setValue("Id Estado:");
        htmlPanelGrid.getChildren().add(idEstadoCreateOutput);
        
        InputText idEstadoCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        idEstadoCreateInput.setId("idEstadoCreateInput");
        idEstadoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idEstado}", String.class));
        LengthValidator idEstadoCreateInputValidator = new LengthValidator();
        idEstadoCreateInputValidator.setMaximum(2);
        idEstadoCreateInput.addValidator(idEstadoCreateInputValidator);
        idEstadoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idEstadoCreateInput);
        
        Message idEstadoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idEstadoCreateInputMessage.setId("idEstadoCreateInputMessage");
        idEstadoCreateInputMessage.setFor("idEstadoCreateInput");
        idEstadoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idEstadoCreateInputMessage);
        
        OutputLabel fechaCreacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaCreacionCreateOutput.setFor("fechaCreacionCreateInput");
        fechaCreacionCreateOutput.setId("fechaCreacionCreateOutput");
        fechaCreacionCreateOutput.setValue("Fecha Creacion:");
        htmlPanelGrid.getChildren().add(fechaCreacionCreateOutput);
        
        Calendar fechaCreacionCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaCreacionCreateInput.setId("fechaCreacionCreateInput");
        fechaCreacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.fechaCreacion}", Date.class));
        fechaCreacionCreateInput.setNavigator(true);
        fechaCreacionCreateInput.setEffect("slideDown");
        fechaCreacionCreateInput.setPattern("dd/MM/yyyy");
        fechaCreacionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(fechaCreacionCreateInput);
        
        Message fechaCreacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaCreacionCreateInputMessage.setId("fechaCreacionCreateInputMessage");
        fechaCreacionCreateInputMessage.setFor("fechaCreacionCreateInput");
        fechaCreacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaCreacionCreateInputMessage);
        
        OutputLabel fechaActualizacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaActualizacionCreateOutput.setFor("fechaActualizacionCreateInput");
        fechaActualizacionCreateOutput.setId("fechaActualizacionCreateOutput");
        fechaActualizacionCreateOutput.setValue("Fecha Actualizacion:");
        htmlPanelGrid.getChildren().add(fechaActualizacionCreateOutput);
        
        Calendar fechaActualizacionCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaActualizacionCreateInput.setId("fechaActualizacionCreateInput");
        fechaActualizacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.fechaActualizacion}", Date.class));
        fechaActualizacionCreateInput.setNavigator(true);
        fechaActualizacionCreateInput.setEffect("slideDown");
        fechaActualizacionCreateInput.setPattern("dd/MM/yyyy");
        fechaActualizacionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaActualizacionCreateInput);
        
        Message fechaActualizacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaActualizacionCreateInputMessage.setId("fechaActualizacionCreateInputMessage");
        fechaActualizacionCreateInputMessage.setFor("fechaActualizacionCreateInput");
        fechaActualizacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaActualizacionCreateInputMessage);
        
        OutputLabel idUsuarioCreaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idUsuarioCreaCreateOutput.setFor("idUsuarioCreaCreateInput");
        idUsuarioCreaCreateOutput.setId("idUsuarioCreaCreateOutput");
        idUsuarioCreaCreateOutput.setValue("Id Usuario Crea:");
        htmlPanelGrid.getChildren().add(idUsuarioCreaCreateOutput);
        
        InputText idUsuarioCreaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        idUsuarioCreaCreateInput.setId("idUsuarioCreaCreateInput");
        idUsuarioCreaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idUsuarioCrea}", String.class));
        LengthValidator idUsuarioCreaCreateInputValidator = new LengthValidator();
        idUsuarioCreaCreateInputValidator.setMaximum(8);
        idUsuarioCreaCreateInput.addValidator(idUsuarioCreaCreateInputValidator);
        idUsuarioCreaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idUsuarioCreaCreateInput);
        
        Message idUsuarioCreaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idUsuarioCreaCreateInputMessage.setId("idUsuarioCreaCreateInputMessage");
        idUsuarioCreaCreateInputMessage.setFor("idUsuarioCreaCreateInput");
        idUsuarioCreaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idUsuarioCreaCreateInputMessage);
        
        OutputLabel idUsuarioActualizaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idUsuarioActualizaCreateOutput.setFor("idUsuarioActualizaCreateInput");
        idUsuarioActualizaCreateOutput.setId("idUsuarioActualizaCreateOutput");
        idUsuarioActualizaCreateOutput.setValue("Id Usuario Actualiza:");
        htmlPanelGrid.getChildren().add(idUsuarioActualizaCreateOutput);
        
        InputText idUsuarioActualizaCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        idUsuarioActualizaCreateInput.setId("idUsuarioActualizaCreateInput");
        idUsuarioActualizaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idUsuarioActualiza}", String.class));
        LengthValidator idUsuarioActualizaCreateInputValidator = new LengthValidator();
        idUsuarioActualizaCreateInputValidator.setMaximum(8);
        idUsuarioActualizaCreateInput.addValidator(idUsuarioActualizaCreateInputValidator);
        idUsuarioActualizaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idUsuarioActualizaCreateInput);
        
        Message idUsuarioActualizaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idUsuarioActualizaCreateInputMessage.setId("idUsuarioActualizaCreateInputMessage");
        idUsuarioActualizaCreateInputMessage.setFor("idUsuarioActualizaCreateInput");
        idUsuarioActualizaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idUsuarioActualizaCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCatalogoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel idCatalogoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idCatalogoEditOutput.setFor("idCatalogoEditInput");
        idCatalogoEditOutput.setId("idCatalogoEditOutput");
        idCatalogoEditOutput.setValue("Id Catalogo:");
        htmlPanelGrid.getChildren().add(idCatalogoEditOutput);
        
        AutoComplete idCatalogoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idCatalogoEditInput.setId("idCatalogoEditInput");
        idCatalogoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idCatalogo}", Catalogo.class));
        idCatalogoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{detalleCatalogoBean.completeIdCatalogo}", List.class, new Class[] { String.class }));
        idCatalogoEditInput.setDropdown(true);
        idCatalogoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idCatalogo", String.class));
        idCatalogoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idCatalogo.codigo} #{idCatalogo.descripcion} #{idCatalogo.idEstado} #{idCatalogo.fechaCreacion}", String.class));
        idCatalogoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idCatalogo}", Catalogo.class));
        idCatalogoEditInput.setConverter(new CatalogoConverter());
        idCatalogoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(idCatalogoEditInput);
        
        Message idCatalogoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idCatalogoEditInputMessage.setId("idCatalogoEditInputMessage");
        idCatalogoEditInputMessage.setFor("idCatalogoEditInput");
        idCatalogoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idCatalogoEditInputMessage);
        
        OutputLabel codigoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        codigoEditOutput.setFor("codigoEditInput");
        codigoEditOutput.setId("codigoEditOutput");
        codigoEditOutput.setValue("Codigo:");
        htmlPanelGrid.getChildren().add(codigoEditOutput);
        
        InputText codigoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        codigoEditInput.setId("codigoEditInput");
        codigoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.codigo}", String.class));
        LengthValidator codigoEditInputValidator = new LengthValidator();
        codigoEditInputValidator.setMaximum(2);
        codigoEditInput.addValidator(codigoEditInputValidator);
        codigoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(codigoEditInput);
        
        Message codigoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        codigoEditInputMessage.setId("codigoEditInputMessage");
        codigoEditInputMessage.setFor("codigoEditInput");
        codigoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(codigoEditInputMessage);
        
        OutputLabel descripcionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        descripcionEditOutput.setFor("descripcionEditInput");
        descripcionEditOutput.setId("descripcionEditOutput");
        descripcionEditOutput.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionEditOutput);
        
        InputTextarea descripcionEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionEditInput.setId("descripcionEditInput");
        descripcionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.descripcion}", String.class));
        LengthValidator descripcionEditInputValidator = new LengthValidator();
        descripcionEditInputValidator.setMaximum(150);
        descripcionEditInput.addValidator(descripcionEditInputValidator);
        descripcionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(descripcionEditInput);
        
        Message descripcionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        descripcionEditInputMessage.setId("descripcionEditInputMessage");
        descripcionEditInputMessage.setFor("descripcionEditInput");
        descripcionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(descripcionEditInputMessage);
        
        OutputLabel valorAuxiliarEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        valorAuxiliarEditOutput.setFor("valorAuxiliarEditInput");
        valorAuxiliarEditOutput.setId("valorAuxiliarEditOutput");
        valorAuxiliarEditOutput.setValue("Valor Auxiliar:");
        htmlPanelGrid.getChildren().add(valorAuxiliarEditOutput);
        
        InputTextarea valorAuxiliarEditInput = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        valorAuxiliarEditInput.setId("valorAuxiliarEditInput");
        valorAuxiliarEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.valorAuxiliar}", String.class));
        LengthValidator valorAuxiliarEditInputValidator = new LengthValidator();
        valorAuxiliarEditInputValidator.setMaximum(50);
        valorAuxiliarEditInput.addValidator(valorAuxiliarEditInputValidator);
        valorAuxiliarEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(valorAuxiliarEditInput);
        
        Message valorAuxiliarEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        valorAuxiliarEditInputMessage.setId("valorAuxiliarEditInputMessage");
        valorAuxiliarEditInputMessage.setFor("valorAuxiliarEditInput");
        valorAuxiliarEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(valorAuxiliarEditInputMessage);
        
        OutputLabel idEstadoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idEstadoEditOutput.setFor("idEstadoEditInput");
        idEstadoEditOutput.setId("idEstadoEditOutput");
        idEstadoEditOutput.setValue("Id Estado:");
        htmlPanelGrid.getChildren().add(idEstadoEditOutput);
        
        InputText idEstadoEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        idEstadoEditInput.setId("idEstadoEditInput");
        idEstadoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idEstado}", String.class));
        LengthValidator idEstadoEditInputValidator = new LengthValidator();
        idEstadoEditInputValidator.setMaximum(2);
        idEstadoEditInput.addValidator(idEstadoEditInputValidator);
        idEstadoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idEstadoEditInput);
        
        Message idEstadoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idEstadoEditInputMessage.setId("idEstadoEditInputMessage");
        idEstadoEditInputMessage.setFor("idEstadoEditInput");
        idEstadoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idEstadoEditInputMessage);
        
        OutputLabel fechaCreacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaCreacionEditOutput.setFor("fechaCreacionEditInput");
        fechaCreacionEditOutput.setId("fechaCreacionEditOutput");
        fechaCreacionEditOutput.setValue("Fecha Creacion:");
        htmlPanelGrid.getChildren().add(fechaCreacionEditOutput);
        
        Calendar fechaCreacionEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaCreacionEditInput.setId("fechaCreacionEditInput");
        fechaCreacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.fechaCreacion}", Date.class));
        fechaCreacionEditInput.setNavigator(true);
        fechaCreacionEditInput.setEffect("slideDown");
        fechaCreacionEditInput.setPattern("dd/MM/yyyy");
        fechaCreacionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(fechaCreacionEditInput);
        
        Message fechaCreacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaCreacionEditInputMessage.setId("fechaCreacionEditInputMessage");
        fechaCreacionEditInputMessage.setFor("fechaCreacionEditInput");
        fechaCreacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaCreacionEditInputMessage);
        
        OutputLabel fechaActualizacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaActualizacionEditOutput.setFor("fechaActualizacionEditInput");
        fechaActualizacionEditOutput.setId("fechaActualizacionEditOutput");
        fechaActualizacionEditOutput.setValue("Fecha Actualizacion:");
        htmlPanelGrid.getChildren().add(fechaActualizacionEditOutput);
        
        Calendar fechaActualizacionEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaActualizacionEditInput.setId("fechaActualizacionEditInput");
        fechaActualizacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.fechaActualizacion}", Date.class));
        fechaActualizacionEditInput.setNavigator(true);
        fechaActualizacionEditInput.setEffect("slideDown");
        fechaActualizacionEditInput.setPattern("dd/MM/yyyy");
        fechaActualizacionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaActualizacionEditInput);
        
        Message fechaActualizacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaActualizacionEditInputMessage.setId("fechaActualizacionEditInputMessage");
        fechaActualizacionEditInputMessage.setFor("fechaActualizacionEditInput");
        fechaActualizacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaActualizacionEditInputMessage);
        
        OutputLabel idUsuarioCreaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idUsuarioCreaEditOutput.setFor("idUsuarioCreaEditInput");
        idUsuarioCreaEditOutput.setId("idUsuarioCreaEditOutput");
        idUsuarioCreaEditOutput.setValue("Id Usuario Crea:");
        htmlPanelGrid.getChildren().add(idUsuarioCreaEditOutput);
        
        InputText idUsuarioCreaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        idUsuarioCreaEditInput.setId("idUsuarioCreaEditInput");
        idUsuarioCreaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idUsuarioCrea}", String.class));
        LengthValidator idUsuarioCreaEditInputValidator = new LengthValidator();
        idUsuarioCreaEditInputValidator.setMaximum(8);
        idUsuarioCreaEditInput.addValidator(idUsuarioCreaEditInputValidator);
        idUsuarioCreaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idUsuarioCreaEditInput);
        
        Message idUsuarioCreaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idUsuarioCreaEditInputMessage.setId("idUsuarioCreaEditInputMessage");
        idUsuarioCreaEditInputMessage.setFor("idUsuarioCreaEditInput");
        idUsuarioCreaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idUsuarioCreaEditInputMessage);
        
        OutputLabel idUsuarioActualizaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idUsuarioActualizaEditOutput.setFor("idUsuarioActualizaEditInput");
        idUsuarioActualizaEditOutput.setId("idUsuarioActualizaEditOutput");
        idUsuarioActualizaEditOutput.setValue("Id Usuario Actualiza:");
        htmlPanelGrid.getChildren().add(idUsuarioActualizaEditOutput);
        
        InputText idUsuarioActualizaEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        idUsuarioActualizaEditInput.setId("idUsuarioActualizaEditInput");
        idUsuarioActualizaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idUsuarioActualiza}", String.class));
        LengthValidator idUsuarioActualizaEditInputValidator = new LengthValidator();
        idUsuarioActualizaEditInputValidator.setMaximum(8);
        idUsuarioActualizaEditInput.addValidator(idUsuarioActualizaEditInputValidator);
        idUsuarioActualizaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idUsuarioActualizaEditInput);
        
        Message idUsuarioActualizaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idUsuarioActualizaEditInputMessage.setId("idUsuarioActualizaEditInputMessage");
        idUsuarioActualizaEditInputMessage.setFor("idUsuarioActualizaEditInput");
        idUsuarioActualizaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idUsuarioActualizaEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid DetalleCatalogoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText idCatalogoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idCatalogoLabel.setId("idCatalogoLabel");
        idCatalogoLabel.setValue("Id Catalogo:");
        htmlPanelGrid.getChildren().add(idCatalogoLabel);
        
        HtmlOutputText idCatalogoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idCatalogoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idCatalogo}", Catalogo.class));
        idCatalogoValue.setConverter(new CatalogoConverter());
        htmlPanelGrid.getChildren().add(idCatalogoValue);
        
        HtmlOutputText codigoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codigoLabel.setId("codigoLabel");
        codigoLabel.setValue("Codigo:");
        htmlPanelGrid.getChildren().add(codigoLabel);
        
        HtmlOutputText codigoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        codigoValue.setId("codigoValue");
        codigoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.codigo}", String.class));
        htmlPanelGrid.getChildren().add(codigoValue);
        
        HtmlOutputText descripcionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        descripcionLabel.setId("descripcionLabel");
        descripcionLabel.setValue("Descripcion:");
        htmlPanelGrid.getChildren().add(descripcionLabel);
        
        InputTextarea descripcionValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        descripcionValue.setId("descripcionValue");
        descripcionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.descripcion}", String.class));
        descripcionValue.setReadonly(true);
        descripcionValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(descripcionValue);
        
        HtmlOutputText valorAuxiliarLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        valorAuxiliarLabel.setId("valorAuxiliarLabel");
        valorAuxiliarLabel.setValue("Valor Auxiliar:");
        htmlPanelGrid.getChildren().add(valorAuxiliarLabel);
        
        InputTextarea valorAuxiliarValue = (InputTextarea) application.createComponent(InputTextarea.COMPONENT_TYPE);
        valorAuxiliarValue.setId("valorAuxiliarValue");
        valorAuxiliarValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.valorAuxiliar}", String.class));
        valorAuxiliarValue.setReadonly(true);
        valorAuxiliarValue.setDisabled(true);
        htmlPanelGrid.getChildren().add(valorAuxiliarValue);
        
        HtmlOutputText idEstadoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idEstadoLabel.setId("idEstadoLabel");
        idEstadoLabel.setValue("Id Estado:");
        htmlPanelGrid.getChildren().add(idEstadoLabel);
        
        HtmlOutputText idEstadoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idEstadoValue.setId("idEstadoValue");
        idEstadoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idEstado}", String.class));
        htmlPanelGrid.getChildren().add(idEstadoValue);
        
        HtmlOutputText fechaCreacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaCreacionLabel.setId("fechaCreacionLabel");
        fechaCreacionLabel.setValue("Fecha Creacion:");
        htmlPanelGrid.getChildren().add(fechaCreacionLabel);
        
        HtmlOutputText fechaCreacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaCreacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.fechaCreacion}", Calendar.class));
        DateTimeConverter fechaCreacionValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaCreacionValueConverter.setPattern("dd/MM/yyyy");
        fechaCreacionValue.setConverter(fechaCreacionValueConverter);
        htmlPanelGrid.getChildren().add(fechaCreacionValue);
        
        HtmlOutputText fechaActualizacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaActualizacionLabel.setId("fechaActualizacionLabel");
        fechaActualizacionLabel.setValue("Fecha Actualizacion:");
        htmlPanelGrid.getChildren().add(fechaActualizacionLabel);
        
        HtmlOutputText fechaActualizacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaActualizacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.fechaActualizacion}", Calendar.class));
        DateTimeConverter fechaActualizacionValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaActualizacionValueConverter.setPattern("dd/MM/yyyy");
        fechaActualizacionValue.setConverter(fechaActualizacionValueConverter);
        htmlPanelGrid.getChildren().add(fechaActualizacionValue);
        
        HtmlOutputText idUsuarioCreaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idUsuarioCreaLabel.setId("idUsuarioCreaLabel");
        idUsuarioCreaLabel.setValue("Id Usuario Crea:");
        htmlPanelGrid.getChildren().add(idUsuarioCreaLabel);
        
        HtmlOutputText idUsuarioCreaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idUsuarioCreaValue.setId("idUsuarioCreaValue");
        idUsuarioCreaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idUsuarioCrea}", String.class));
        htmlPanelGrid.getChildren().add(idUsuarioCreaValue);
        
        HtmlOutputText idUsuarioActualizaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idUsuarioActualizaLabel.setId("idUsuarioActualizaLabel");
        idUsuarioActualizaLabel.setValue("Id Usuario Actualiza:");
        htmlPanelGrid.getChildren().add(idUsuarioActualizaLabel);
        
        HtmlOutputText idUsuarioActualizaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idUsuarioActualizaValue.setId("idUsuarioActualizaValue");
        idUsuarioActualizaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{detalleCatalogoBean.detalleCatalogo.idUsuarioActualiza}", String.class));
        htmlPanelGrid.getChildren().add(idUsuarioActualizaValue);
        
        return htmlPanelGrid;
    }
    
    public DetalleCatalogo DetalleCatalogoBean.getDetalleCatalogo() {
        if (detalleCatalogo == null) {
            detalleCatalogo = new DetalleCatalogo();
        }
        return detalleCatalogo;
    }
    
    public void DetalleCatalogoBean.setDetalleCatalogo(DetalleCatalogo detalleCatalogo) {
        this.detalleCatalogo = detalleCatalogo;
    }
    
    public List<Catalogo> DetalleCatalogoBean.completeIdCatalogo(String query) {
        List<Catalogo> suggestions = new ArrayList<Catalogo>();
        for (Catalogo catalogo : catalogoService.findAllCatalogoes()) {
            String catalogoStr = String.valueOf(catalogo.getCodigo() +  " "  + catalogo.getDescripcion() +  " "  + catalogo.getIdEstado() +  " "  + catalogo.getFechaCreacion());
            if (catalogoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(catalogo);
            }
        }
        return suggestions;
    }
    
    public String DetalleCatalogoBean.onEdit() {
        return null;
    }
    
    public boolean DetalleCatalogoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void DetalleCatalogoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String DetalleCatalogoBean.displayList() {
        createDialogVisible = false;
        findAllDetalleCatalogoes();
        return "detalleCatalogo";
    }
    
    public String DetalleCatalogoBean.displayCreateDialog() {
        detalleCatalogo = new DetalleCatalogo();
        createDialogVisible = true;
        return "detalleCatalogo";
    }
    
    public String DetalleCatalogoBean.persist() {
        String message = "";
        if (detalleCatalogo.getIdDetalleCatalogo() != null) {
            detalleCatalogoService.updateDetalleCatalogo(detalleCatalogo);
            message = "message_successfully_updated";
        } else {
            detalleCatalogoService.saveDetalleCatalogo(detalleCatalogo);
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "DetalleCatalogo");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDetalleCatalogoes();
    }
    
    public String DetalleCatalogoBean.delete() {
        detalleCatalogoService.deleteDetalleCatalogo(detalleCatalogo);
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "DetalleCatalogo");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllDetalleCatalogoes();
    }
    
    public void DetalleCatalogoBean.reset() {
        detalleCatalogo = null;
        createDialogVisible = false;
    }
    
    public void DetalleCatalogoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
